# Proprietes de l'application
spring:
  application:
    name: apigateway # nom de l'application
  cloud:
    # Configuration de l'API Gateway
    gateway:
      discovery:
        locator:
          enabled: true #activation eureka locator
          lowerCaseServiceId: true
          # car le nom des services est en minuscule dans l'URL
      # Configuration des routes de l'API Gateway
      routes:
        #Service ACTIONNEUR
        - id: actionneur-service
          uri: lb://ac-actionneur/ #Attention : lb et pas HTTP. Lb est prêt pour faire du load-balancing
          predicates:
            # On matche tout ce qui commence par /api/clients
            - Path=/api/actionneur/**
          filters:
            # On va réécrire l'URL pour enlever le /api/client
            - RewritePath=/api/capteur(?<segment>/?.*), /$\{segment}
        #Service CAPTEUR
        - id: capteur-service
          uri: lb://ac-capteur/
          predicates:
            - Path=/api/capteur/**
          filters:
            - RewritePath=/api/actionneurs(?<segment>/?.*), /$\{segment}
        #Service CAPTEUR-ACTIONNEUR
        - id: capteur-actionneur-composite
          uri: lb://ac-composite-capteur-actionneur/
          predicates:
            - Path=/api/capteuractionneur/**
          filters:
            - RewritePath=/api/capteuractionneur(?<segment>/?.*), /$\{segment}
          #Service CAPTEUR-RELEVE
        - id: capteur-releve-composite
          uri: lb://ac-composite-capteur-releve/
          predicates:
            - Path=/api/capteurreleve/**
          filters:
            - RewritePath=/api/capteurreleve(?<segment>/?.*), /$\{segment}
      enabled: on # Activation gateway
    # Activation remontée management dans Eureka
    config:
      service-registry:
        auto-registration:
          register-management: on
# Activation des endpoints pour le monitoring
management:
  endpoints:
    web:
      exposure:
        include: env,health,
          info,metrics,
          loggers,mappings, prometheus
  tracing:
    sampling:
      probability: 1.0

# Configuration client de l'annuaire
# L'API Gateway va s'enregistrer comme un micro-service sur l'annuaire
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:10001/eureka/ # url d'accès à l'annuaire
  instance:
    metadata-map:
      prometheus.scrape: "true"
      prometheus.path: "/actuator/prometheus"
      prometheus.port: "${management.server.port}"
      #    instance:
      #      metadataMap:
      # on va surcharger le nom de l'application si plusieurs instances de l'API Gateway ont même IP et même port
      # on surcharge par une valeur random si le nom de l'instance existe déjà.
#        instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}

# Configuration du log.
logging:
  level:
    org.springframework.web: INFO # Choix du niveau de log affiché
#    org.springframework.cloud.gateway: DEBUG # pour avoir plus d'infos sur le gateway
#    reactor.netty.http.client: DEBUG # pour avoir plus d'infos sur les appels HTTP

# Proprietes du serveur d'entreprise
server:
  port: 10000 # HTTP (Tomcat) port
